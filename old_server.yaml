AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  userInitials:
    AllowedPattern: '[a-z][a-z]*'
    ConstraintDescription: lowercase string
    Description: string that uniquely defines this servers owner
    MaxLength: '64'
    MinLength: '1'
    Type: String

  vpcID:
    Description: The VPC to create in
    Type: AWS::EC2::VPC::Id

  publicSubnets:
    Description: The subnets that are routable from the internet
    Type: List<AWS::EC2::Subnet::Id>

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0b33d91d

Resources:
  hyraxServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: manipulated by shell scripts to grant developer access
      VpcId: !Ref vpcID
      Tags:
        - {Key: Name, Value: !Sub "hyrax-server-sg-${userInitials}"}
        - {Key: project, Value: hyrax}

  hyraxELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: manipulated by shell scripts to grant developer access
      VpcId: !Ref vpcID
      Tags:
        - {Key: Name, Value: !Sub "hyrax-elb-sg-${userInitials}"}
        - {Key: project, Value: hyrax}

  hyraxDBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: manipulated by shell scripts to grant developer access
      VpcId: !Ref vpcID
      Tags:
        - {Key: Name, Value: !Sub "hyrax-db-sg-${userInitials}"}
        - {Key: project, Value: hyrax}

  RootRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:*"
                Resource: "*"

  RootInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "RootRole"

  hyraxServer:
    DependsOn: hyraxServerSG
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref RootRole
          buckets: hyrax-artifacts
      AWS::CloudFormation::Init:
        configSets:
          hyrax_install:
          - solr_base
          - solr_install
        solr_base:        # installs packages and sets up data volume for solr
          packages:
            yum:
              java-1.8.0-openjdk.x86_64: []
          files:
            /tmp/mount_new_vol:
              content: |
                #!/bin/bash -xe
                mkfs -t ext4 /dev/xvdf
                mkdir /mnt/solr
                echo "dev/xvdf    /mnt/solr   ext4    defaults,nofail 0   2" >> /etc/fstab
                mount -a
              group: root
              mode: '000500'
              owner: root
          commands:
            01_mount:
              command: /tmp/mount_new_vol > /var/log/mount_solr_volume.log
            02_drop_java17:
              command: yum remove java-1.7.0-openjdk -y
        solr_install:
          files:
            /tmp/unpack_solr:         # solr wants to install itself, so unpack its install script and execute
              content: |
                #!/bin/bash -xe
                cd /mnt/solr
                aws s3 cp s3://hyrax-artifacts/solr-6.3.0.tgz .
                tar xzf solr-6.3.0.tgz solr-6.3.0/bin/install_solr_service.sh --strip-components=2
                ./install_solr_service.sh solr-6.3.0.tgz -d /mnt/solr
                rm install_solr_service.sh -f
                rm solr-6.3.0.tgz -f
                service solr start
                chkconfig solr on
              group: root
              mode: '000500'
              owner: root
          commands:
            01_unpack:
              command: /tmp/unpack_solr > /var/log/unpack_solr.log
              cwd: /mnt/solr
    Properties:
      IamInstanceProfile: !Ref RootInstanceProfile
      SecurityGroupIds: [!Ref hyraxServerSG]
      KeyName: hyrax-keypair
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: m4.large
      BlockDeviceMappings:
      - DeviceName: /dev/sdf
        Ebs:
          VolumeSize: 4
          VolumeType: gp2
          DeleteOnTermination: true
      SubnetId: !Select [ 0, !Ref publicSubnets ]
      Tags:
        - {Key: Name, Value: !Sub "hyrax-server-${userInitials}"}
        - {Key: project, Value: hyrax}
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
           yum update -y
           yum update -y aws-cfn-bootstrap
           /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource hyraxServer --configsets hyrax_install --region ${AWS::Region}
